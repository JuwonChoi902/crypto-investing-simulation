# https://circleci.com/docs/2.0/configuration-reference

version: 2.1


aliases:
  - &restore-node-modules-cache
      name: Restore node_modules cache
      keys:
        - &cache-key v1-dependencies-{{ checksum "package.json" }}

  - &save-node-modules-cache
      name: Save node_modules cache
      paths:
        - node_modules
      key: *cache-key

  - &restore-node-modules-cache-website
      name: Restore node_modules cache for /website
      keys:
        - &cache-key-website v1-dependencies-website-{{ checksum "website/package.json" }}

  - &save-node-modules-cache-website
      name: Save node_modules cache for /website
      paths:
        - website/node_modules
      key: *cache-key-website

  - &default-filters
      tags:
        ignore:
          - /.*/

  - &merge-based-filters
      <<: *default-filters
      branches:
        ignore:
          - master
          - /release\/.*/


executors:
  node16-executor:
    docker:
      - image: cimg/node:16.16

  node16-browsers-executor:
    docker:
      - image: cimg/node:16.16-browsers

commands:
  checkout-with-deps:
    description: "Checkout the code with restore npm dependencies"
    steps:
      - checkout
      - restore_cache: *restore-node-modules-cache
      - restore_cache: *restore-node-modules-cache-website

  run-graphics-tests:
    description: "Run graphics tests with specific devicePixelRatio"
    parameters:
      devicePixelRatio:
        type: string
      productionBuild:
        type: boolean
        default: false
    steps:
      - checkout-with-deps
      - run:
          name: "Setup Environment Variables"
          command: |
            echo 'export NO_SANDBOX="true"' >> $BASH_ENV
            echo 'export CMP_OUT_DIR="./graphics-cmp-data"' >> $BASH_ENV
            echo 'export TESTS_REPORT_FILE="test-results/graphics/results.xml"' >> $BASH_ENV
            echo 'export DEVICE_PIXEL_RATIO=<< parameters.devicePixelRatio >>' >> $BASH_ENV
            echo 'export PRODUCTION_BUILD=<< parameters.productionBuild >>' >> $BASH_ENV
      - run:
          command: scripts/run-graphics-tests.sh
          no_output_timeout: 20m

      - store_test_results:
          path: test-results/
      - store_artifacts:
          path: ./graphics-cmp-data
          when: on_fail


jobs:
  install-deps:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - run: npm install
      - save_cache: *save-node-modules-cache

  install-deps-website:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - run: cd website && npm install
      - save_cache: *save-node-modules-cache-website

  build:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - run: npm run build:prod
      # make sure that the project is compiled successfully with composite projects
      # so we don't have cyclic deps between projects and wrong imports
      - run: npm run tsc-verify
      - persist_to_workspace:
          root: ./
          paths:
            - lib
            - dist

  no-crlf:
    executor: node16-executor
    steps:
      - checkout
      - run: scripts/no-crlf.sh

  trailing-lf:
    executor: node16-executor
    steps:
      - checkout
      - run: scripts/trailing-newlines.sh

  lint-eslint:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: npm run lint:eslint

  lint-dts:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: npm run bundle-dts
      - run: npm run check-dts-docs

  lint-markdown:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - run: npm run lint:md

  unittests:
    executor: node16-executor
    environment:
      TESTS_REPORT_FILE: "test-results/unittests/results.xml"
    steps:
      - checkout-with-deps
      - run: npm run test
      - store_test_results:
          path: test-results/

  dts-changes:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - run: scripts/check-dts-changes.sh ./dts-changes $(git merge-base origin/master HEAD) $(git rev-parse HEAD)
      - store_artifacts:
          path: ./dts-changes
          when: on_fail

  graphics-tests-dpr1_0:
    executor: node16-browsers-executor
    steps:
      - run-graphics-tests:
          devicePixelRatio: "1.0"

  graphics-tests-dpr1_5:
    executor: node16-browsers-executor
    steps:
      - run-graphics-tests:
          devicePixelRatio: "1.5"

  graphics-tests-dpr2_0:
    executor: node16-browsers-executor
    steps:
      - run-graphics-tests:
          devicePixelRatio: "2.0"

  graphics-tests-dpr2_0-prod:
    executor: node16-browsers-executor
    steps:
      - run-graphics-tests:
          devicePixelRatio: "2.0"
          productionBuild: true


  memleaks-tests:
    executor: node16-browsers-executor
    environment:
      NO_SANDBOX: "true"
      TESTS_REPORT_FILE: "test-results/memleaks/results.xml"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: scripts/run-memleaks-tests.sh
      - store_test_results:
          path: test-results/

  coverage:
    executor: node16-browsers-executor
    environment:
      NO_SANDBOX: "true"
      TESTS_REPORT_FILE: "test-results/coverage/results.xml"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: scripts/run-coverage-tests.sh
      - store_test_results:
          path: test-results/

  interactions:
    executor: node16-browsers-executor
    environment:
      NO_SANDBOX: "true"
      TESTS_REPORT_FILE: "test-results/interactions/results.xml"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: scripts/run-interactions-tests.sh
      - store_test_results:
          path: test-results/

  size-limit:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run:
          name: "Comparing sizes with merge-base"
          command: node scripts/compare-size-with-merge-base.js
      - run: npm run size-limit

  build-docusaurus-website:
    executor: node16-executor
    steps:
      - checkout-with-deps
      - run: npm run build:prod
      - run:
          name: "Install dependencies and build website"
          command: |
            cd website
            npm install
            npm run build
      - run:
          # we need to run this check here because only here we have generated md files of the website
          name: "Check website markdown links"
          command: npm run check-markdown-links -- --check-website-links
      - persist_to_workspace:
          root: ./
          paths:
            - website

  deploy-docusaurus-website:
    executor: node16-executor
    environment:
      USE_SSH: "true"
      # We should be able to remove GIT_USER when we have upgraded to a Docusaurus version > 2.0.0-beta.9
      GIT_USER: "tvrobot"
      CUSTOM_COMMIT_MESSAGE: "[skip ci] Deploy website based on $CIRCLE_SHA1"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run:
          name: "Setting up git user"
          command: |
            git config --global user.name "TradingView"
            git config --global user.email "noreply@tradingview.com"
      - add_ssh_keys:
          fingerprints:
            - "cb:bc:16:a1:03:fb:b5:fb:69:4b:68:4d:33:a9:54:8c"
      - run:
          name: "Deploy website"
          command: |
            cd website
            npm run deploy -- --skip-build

workflows:
  version: 2

  build-lint-test:
    jobs:
      - install-deps:
          filters: *default-filters
      - install-deps-website:
          filters: *default-filters
      - no-crlf:
          filters: *default-filters
      - trailing-lf:
          filters: *default-filters

      - build:
          filters: *default-filters
          requires:
            - install-deps
            - install-deps-website
      - lint-markdown:
          filters: *default-filters
          requires:
            - install-deps

      - size-limit:
          filters: *default-filters
          requires:
            - build
      - unittests:
          filters: *default-filters
          requires:
            - build
      - dts-changes:
          filters: *merge-based-filters
          requires:
            - build
      - graphics-tests-dpr1_0:
          filters: *merge-based-filters
          requires:
            - build
      - graphics-tests-dpr1_5:
          filters: *merge-based-filters
          requires:
            - build
      - graphics-tests-dpr2_0:
          filters: *merge-based-filters
          requires:
            - build
      - graphics-tests-dpr2_0-prod:
          filters: *merge-based-filters
          requires:
            - build
      - memleaks-tests:
          filters: *default-filters
          requires:
            - build
      - coverage:
          filters: *default-filters
          requires:
            - build
      - interactions:
          filters: *default-filters
          requires:
            - build
      - lint-dts:
          filters: *default-filters
          requires:
            - build
      - lint-eslint:
          filters: *default-filters
          requires:
            - build
      - build-docusaurus-website:
          filters: *default-filters
          requires:
            - install-deps
            - install-deps-website
      - deploy-docusaurus-website:
          filters:
            branches:
              only: master
          requires:
            - build-docusaurus-website
